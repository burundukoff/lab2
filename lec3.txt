def foo(x, y):  формаьные паратмеры
    x[0] = 7

y = foo(A.3)  фактические параметры которые передаются в функцию
A = [1.2.3]

если передать в фактичеческие параметры список, то если мы точно знаем индекс объекта, то можем по факту поменять
значение внутри списка из функции. таким образом мы рабоатем со списком через ссылку. = A [7.2.3]
Если же мы сделаем еще нижк x = [4.5.6] это будет уже новый объект и X будет указыват на него, а А будет так и далее
указывать на свой список А = [7.2.3]
def  foo(x:str, y:int) указание какие будет данные на входе в параметре, но это работает как комментарий для читающих
код.

def foo(x, y, z):
    return 100*x + 10y + 1z

print(foo(1,2,3))
print(foo(z = 1,x = 2, y = 3))  (именнованные параметры) передача параметров не автоматом последовательно,
а именно эти в эти
в обычном варианте функция просто последовательно возьмет их и присвоит

def foo (x, y, z = 0) функция со значением по умолчанию, если не будет задан параметр Z при ее вызове, то
функция возьмет это значение по умолчанию

''' какойто код , многострочный код, для того чтобы временно закоментировать код, которые пока не нужен
'''
def bar(args):
    for arg in args:
        peint ('bar arg = ', arg)

bar ([1,2,3])
можем в аргумент передать прсото итерируемый объект типа. и пользоваться им

можно еще и так
def bar(*args):  если стоит звездочка то можно передать произвольное количество аргументов
    return

def bar(*args, named_parameter="bar"): вяли и добавили к произвольному количеству параметров ешще и именованный параметр